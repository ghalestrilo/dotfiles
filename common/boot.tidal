:set -XOverloadedStrings
:set prompt ""
:set prompt-cont ""

import Sound.Tidal.Context
import System.IO (hSetEncoding, stdout, utf8)
hSetEncoding stdout utf8



tidal <- startTidal (superdirtTarget { oLatency = 0.1, oAddress = "127.0.0.1", oPort = 57120}) (defaultConfig { cFrameTimespan = 1/20 , cCtrlAddr = "0.0.0.0" , cCtrlPort = 6010 })







-- MULTI-TIDAL CONFIG
-- tidal <- startTidal (superdirtTarget {oLatency = 0.02}) (defaultConfig {cFrameTimespan = 1/20, cTempoAddr = "192.168.0.78"})



:{ -------------------------------------------------------------------- Basic boot.hs


let p = streamReplace tidal
    hush = streamHush tidal
    list = streamList tidal
    mute = streamMute tidal
    unmute = streamUnmute tidal
    solo = streamSolo tidal
    unsolo = streamUnsolo tidal
    once = streamOnce tidal
    asap = once
    nudgeAll = streamNudgeAll tidal
    all = streamAll tidal
    resetCycles = streamResetCycles tidal
    setcps = asap . cps
    xfade i = transition tidal True (Sound.Tidal.Transition.xfadeIn 4) i
    xfadeIn i t = transition tidal True (Sound.Tidal.Transition.xfadeIn t) i
    histpan i t = transition tidal True (Sound.Tidal.Transition.histpan t) i
    wait i t = transition tidal True (Sound.Tidal.Transition.wait t) i
    waitT i f t = transition tidal True (Sound.Tidal.Transition.waitT f t) i
    jump i = transition tidal True (Sound.Tidal.Transition.jump) i
    jumpIn i t = transition tidal True (Sound.Tidal.Transition.jumpIn t) i
    jumpIn' i t = transition tidal True (Sound.Tidal.Transition.jumpIn' t) i
    jumpMod i t = transition tidal True (Sound.Tidal.Transition.jumpMod t) i
    mortal i lifespan release = transition tidal True (Sound.Tidal.Transition.mortal lifespan release) i
    interpolate i = transition tidal True (Sound.Tidal.Transition.interpolate) i
    interpolateIn i t = transition tidal True (Sound.Tidal.Transition.interpolateIn t) i
    clutch i = transition tidal True (Sound.Tidal.Transition.clutch) i
    clutchIn i t = transition tidal True (Sound.Tidal.Transition.clutchIn t) i
    anticipate i = transition tidal True (Sound.Tidal.Transition.anticipate) i
    anticipateIn i t = transition tidal True (Sound.Tidal.Transition.anticipateIn t) i
    forId i t = transition tidal False (Sound.Tidal.Transition.mortalOverlay t) i
    d1 = p 1 . (|< orbit 0)
    d2 = p 2 . (|< orbit 1)
    d3 = p 3 . (|< orbit 2)
    d4 = p 4 . (|< orbit 3)
    d5 = p 5 . (|< orbit 4)
    d6 = p 6 . (|< orbit 5)
    d7 = p 7 . (|< orbit 6)
    d8 = p 8 . (|< orbit 7)
    d9 = p 9 . (|< orbit 8)
:}

:{
let setI = streamSetI tidal
    setF = streamSetF tidal
    setS = streamSetS tidal
    setR = streamSetI tidal
    setB = streamSetB tidal
:}

:{ -------------------------------------------------------------------- Song Structure
  -- TODO: fix song method
    -- normalize array before calling structureSong
  let measures n p ms = (n, p):ms
      loopend n p = measures n p []
      structureSong st [] = []
      structureSong st (p:ps) =  (st,(st+(fst p)),snd p) : (structureSong ((fst p)+st) ps)
      songLoop ms = seqPLoop $ structureSong 0 ms -- TODO: sloop?
      song ms = seqP $ structureSong 0 ms
:}

-- tophrase :: phr r -> Pattern
--   @receives: a phrase and a root
--   @returns: a pattern made by the phrase offsetted by given root
let tophrase phr r = n (r +| phr)


-- | ON - Apply a function to a pattern when a tag is found "1 2 3 4:1" (1 is the tag, denoted by :)
let tag = pI "tag"
    ntag = grp [mF "note", mI "tag"]
    phrase = "{16 14 11 0 ~     16 14 11 4 6 7 6 7 9 7 9 11:1 ~   16:1 14 11:1 6:2 ~ }%8"
    on tagname lambda = fix lambda (tag tagname)












:{ -------------------------------------------------------------------- Faders
let fx n = cF 0 $ "f" ++ (show n) -- Maps ID to FX Fader
    vx n = cF 0 $ "v" ++ (show n) -- Maps ID to Volume Fader
    -- px n = cF 0 $ "p" ++ (show n) -- Maps ID to Pan Knob
    px n = cF0 $ "px" ++ (show n) -- Maps ID to Pad X
    py n = cF0 $ "py" ++ (show n) -- Maps ID to Pad X
:}














:?

:{ -------------------------------------------------------------------- Tonal Defs
let bus = room (cF 0.1 "room") # size (cF 0.1 "size") # orbit 0
    fader vol = gain (vol |* cF 1 "master")
    root = 5
    mode = "chromatic"
    tonal scalename pat = (note . (|+ root) . scale scalename) pat


let t = note . (|+ cF0 "root") . scale (cS "chromatic" "scale") . (|+ cI0 "chord")

:}











:{ -------------------------------------------------------------------- Instruments

let vk = s "vk" # n 3
    vs = s "vs" # n 117
    vh = s "vh" # n 2 # sus 0.08
    vo = s "vh" # n 15 # sus 1
    gretsch x = n x # s "gretsch" # bus
    piano x = tonal mode x # s "superpiano" # lpf 450 # bus # octave 5
    vibe x  = tonal mode x # s "supervibe" # lpf 500 # bus

-- Midi Instruments
let mm = s "mm" # orbit 0 # midichan 0
    reface = s "reface" # orbit 0 # midichan 0
:}


:{ -- Ritmos

let help = print ["ritmos", "tldr", "scaleList"]
    wtf = help
    fuck = help
    ritmos = print ["axe", "ijexa", "funk", "maracatu", "baiao", "brega"]
    tldr = print "to be done :)"

fuck


let axe      hi lo = fast 2 $ stack [ n "~ <[0 0] [0 0 ~ 0]>" # s lo, slow 2 $ n "0*16" # s hi |* gain (sew "t f f t f f t t f f t f f t f f" "1.08" "0.85") ]
    ijexa    hi lo = n "0*16" # s (sew "t ~ t ~ f ~ f ~ . t t ~ f ~ f f ~" hi lo) -- # unit "c" # speed 8
    funk     hi lo = n "0*16" # s (sew "t ~@2 t f ~ t ~ . ~ [t ~] [f ~] ~" lo hi)
    maracatu hi lo = "~"
    baiao    hi lo = "~"
    brega    hi lo = "~"

-- let r name lo hi =
--       case name of
--       "axe"      -> fast 2 $ stack [ n "~ <[0 0] [0 0 ~ 0]>" # s lo, slow 2 $ n "0*16" # s hi |* gain (sew "t f f t f f t t f f t f f t f f" "1.08" "0.85") ]
--       "ijexa"    -> n "0*16" # s (sew "t ~ t ~ f ~ f ~ . t t ~ f ~ f f ~" hi lo) -- # unit "c" # speed 8
--       "funk"     -> n "0*16" # s (sew "t ~@2 t f ~ t ~ . ~ [t ~] [f ~] ~" lo hi)
--       "maracatu" -> "~"
--       "baiao"    -> "~"



-- Util: bpm function
-- TODO: add fine+coarse OStageC controls for manual syncing
let setbpm bpm = setcps (bpm / 120 / 2)

:}


:{ -- Stolen from Kindohm
let gtfo = (const $ s "~")
    g = gtfo
:}

---------------------------------------------------------------------- Prompt
:set prompt "\n ghales | "
